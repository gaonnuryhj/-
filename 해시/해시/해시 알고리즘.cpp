/*
< 해시 알고리즘 >

해시 : 키와 인덱스를 매핑시켜서 데이터를 Search

장점 : Search 시간이 O(1)
단점 : 개발자의 능력에 따라( 알고리즘에 따라 ) 좋은 알고리즘이 되기도 하고 나쁜 알고리즘이 되기도 한다.
메모리 관리가 중요하다.
정렬되어 있지 않다.

키 : 되도록 중복값 x ( ex- 이름 )
인덱스 : 중복 x

인덱스의 중복이 발생했을 경우
1 ) Chaining : 제일 최근에 들어온 데이터가 앞으로 오도록 해당 주소값에 linked list 로 연결 ( 외부에서 메모리를 끌어다 써야하므로 총 메모리 계산하기 어렵다)
linked list로 계속해서 연결될 경우 배열에서 Search하는 것과 다름없어진다.
데이터 크기가 크고 수가 많을 경우에 주로 사용.
ex- 주소, 성별 등 회원관리

2 ) Open Addressing  : 1. Linear probing : 중복이 발생하면 다음 빈 곳에 넣어준다. ( 데이터가 한곳에 몰릴 수 있다. )
2. Quadratic probing
3. Double probing : 중복이 발생하면 2차 해쉬알고리즘을 써서 새로운 주소값에 매핑시킨다.

데이터 크기가 작거나 수가 적을 경우에 주로 사용, 추가 메모리가 들지 않는다.


데이터 수가 70~80%가 넘어갈 경우 효율이 떨어지므로 새로운 큰 테이블로 옮겨준다.
1. 일정한 크기가 채워지면 거기까지 데이터는 미리 다른 테이블에 옮겨놓는다.
2. 테이블이 차면 다른 테이블에 데이터를 쓰고 테이블을 연결한다.


많은 자료가 있고 데이터 크기를 예측할 수 있을 때 많이 사용한다. ( 전화번호부 )


http://egloos.zum.com/sweeper/v/925740
*/

