/*

< Selection Sort >
: 최소값을 찾아서 왼쪽부터 정렬
배열의 첫번째 값부터 뒤로 비교해가면서 최소값을 찾아서 내 자리랑 교환! 
최소값을 비교하는 변수, 최소값 위치를 저장하는 변수 필요

예 ) 4 7 2 5 6
	 2 7 4 5 6
	 2 4 7 5 6
	 2 4 5 7 6
	 2 4 5 6 7

O(n^2)

< Insertion Sort >
: 배열의 왼쪽 부터 하나씩 삽입한다고 생각
  나를 기준으로 전의 값과 비교하여 기준수가 더 작으면 기준수를 왼쪽에 배치
  왼쪽에서 두번째부터 앞의 것과 비교.

예 ) 4 7 2 5 6

	 4 7 2 5 6 

	 4 2 7 5 6
	 2 4 7 5 6

	 2 4 5 7 6
	 
	 2 4 5 6 7

O(n^2)

< Bubble Sort >
: 배열의 왼쪽부터 2개씩 비교해 간다.

예 ) 4 7 2 5 6 
	 
	 4 7 2 5 6
	 4 2 7 5 6 
	 4 2 5 7 6
	 4 2 5 6 7  // 7 제외
	 
	 2 4 5 6 7

O(n^2)

< Selection Sort >
: 나누어서 정렬한다. 
  삽입 정렬은 한칸씩 이동하면서 비교하기 때문에 가장 멀리 떨어진 곳에서 비교가 이루어진다면
  이동 시 많은 오버헤드가 발생할 수 있기 때문에 이를 보완하기 위해 만들어진 방식이다.  

   1. 나눈 후 쌍으로 삽입정렬시행
   2. 다시 기준 수로 나눈 후 삽입정렬시행
   3. 다시 쪼갠다.
   4. 반복.....!
	
	보통 3을 나누고 1을 더하는 방식을 사용

값이 많아질 경우 삽입정렬보다 빨라진다. O(n^1.3)정도

예 ) 4 7 2 5 6
     ( 4,7,2 ) | ( 5,6 )
	 ( 4,6,2 ) | ( 5,7 )

	 ( 4 ) | ( 6,2 ) | ( 5 ) | ( 7 )
	   4       5,2       6       7

	   4   |   5 |2 |6|7
	   2 4 5 6 7

http://yujuwon.tistory.com/entry/%EC%89%98-%EC%A0%95%EB%A0%ACShell-Sort

*/